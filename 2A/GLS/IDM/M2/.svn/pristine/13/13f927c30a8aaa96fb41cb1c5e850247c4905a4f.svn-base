// Pour thomas
// grammar game.Game with org.eclipse.xtext.common.Terminals
// generate game "http://www.Game.game"

grammar idmprojet.game.Game with org.eclipse.xtext.common.Terminals

generate game "http://www.game.idmprojet/Game"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* le jeu  */
Game:
	'Game'
	name=EString
	'{'
		'explorateur' explorateur=Explorateur
		'lieuDepart' lieuDepart = [Lieu]
		('lieuxArrivee' '(' (lieuxArrivee += [Lieu])+')')
		('gameElements' '{' (gameElements+=GameElement)+ '}' )?
	'}' ;

/* Entité Lieu 
 * les entités visibles ou non dans un lieu 
 */
EntiteLieu:
	'{'
		(entite = Personne | PackObjets | ConnaissanceLieu)
		('conditionVisibilite' conditionVisibilite=Condition)?
	'}'
;

ConnaissanceLieu:
	connaissance=[Connaissance]
;

GameElement:
	Lieu | Chemin | Objet | Connaissance ;

/* Definition du String */
EString returns ecore::EString:
	STRING | ID;
	
/* Definition du Booleen */
EBoolean returns ecore::EBoolean:
	'true' | 'false';

/* Explorateur :
 * nom, taille de son inventaire, connaissances
 * inventaire d'objets, lieu actuel
 */
Explorateur:
	name=EString
	'{'
		'tailleInventaire' tailleInventaire=INT
		('connaissances' '(' (connaissances+=[Connaissance])+')')?
		('inventaire' '(' (inventaire+=PackObjets)+')')?
	'}'
;

/* Personne 
 * nom
 * interaction avec l'explorateur
 */
Personne :
	'personne'
	name=EString
	interaction=Interaction
;
/* Lieu 
 * nom
 * description
 * Chemins empruntables
 * Entités presentes
 */
Lieu : 
		'lieu'
	name = EString 
	'{'
		'description' description = Description
		('cheminsPossibles' '(' (cheminsPossibles+=[Chemin])+')')?
		('entites' '{'(entiteLieu+=EntiteLieu)+ '}')?
	'}';


/* Objet
 * nom
 * description
 * taille dans l'inventaire de l'explorateur
 */
Objet :
	'objet'
	name=EString
	'{'
		'description' description = Description
		'taille' taille=INT
	'}'
;

/* PackObjet
 * quantité d'un objet 
 */
PackObjets :
	'{'
		objet = [Objet]
		',' quantite = INT
	'}'
;

/* Chemin
 * nom
 * descriptions
 * lieu1 lieu2
 * conditions de visibilité
 * condition d'ouverture
 * ouvert
 * recompenses
 * consommations
 */
Chemin :
	'chemin'
	name=EString
	'{'
		'description' description = Description
		('conditionVisibilite' conditionVisibilite=Condition)?
		'lieu1' lieu1 = [Lieu]
		'lieu2' lieu2 = [Lieu]
		('ouvert' ouvert = Condition)?
		('recompenses' '('(recompenses+=Recompense)+ ')')?
		('consommations' '('(consommations+=PackObjets)+ ')')?
	'}'
;

/* Connaissance
 * nom
 * description
 */
Connaissance :
	'connaissance'
	name=EString
	'{'
		'description' description = Description
	'}'
;

/* Condition  
 * nom
 */
Condition :
	(('(' conjonctions+=Conjonction('|' conjonctions+=Conjonction)* ')') | {Condition} EBoolean)
;

OperateurComparaison :
	'<' | '=' | '>'
;

Conjonction :
	'(' litteraux+=Litteral ('&' litteraux+=Litteral)* ')'
;

Litteral :
	'('objet = [Objet] operateur = OperateurComparaison quantite = INT')'
   |'('connaissance = [Connaissance] '=' EBoolean ')'
;


/* Description 
 * textes 
 */
Description :
	'{'
		(textes+=Texte)+
	'}'
;

/* Texte 
 * contenue string
 * condition 
 */
Texte :
	'{'
		contenu = EString
		('condition' condition = Condition)?
	'}' 
;

/* Recompense 
 * Connaissance ou Objet
 * condition d'obtention
 */
Recompense :
	'{'
		(connaissanceObtenue = [Connaissance] | objetsObtenus = PackObjets)
		('conditionObtention' conditionObtention = Condition)?
	'}'
;


/* Action
 * condition
 * recompense
 * consommation d'objets
 */
Action :
	'action'
	'{'
		'description' description = Description
		('condition' condition=Condition)?
		('recompenses' '('(recompenses+=Recompense)+ ')')?
		('consommations' '('(consommations+=PackObjets)+ ')')?
		'choixSuivant' choixSuivant=[Choix]
	'}';
	
	
/* Interaction
 * recompense
 * liste de choix
 */
Interaction :
	'interaction'
	'{'
		('recompenses' '(' (recompenses+=Recompense)+ ')' )?
		(('listeChoixDebut' '(' (listeChoixDebut+=[Choix] listeConditionsDebut+=Condition)+')') | 'seulChoixDebut' seulChoixDebut = [Choix])
		'listeChoix' '(' (listeChoix+=Choix)+')'
	'}'
;

/* Choix
 * nom
 * description
 * choix de fin
 * liste d'actions
 */
Choix :
	'choix'
	name=EString
	'{'
		'description' description = Description
		('choixFin' choixFin = Condition)?
		('listeActions' '(' (listeActions+=Action+)')')?
	'}'	
;
