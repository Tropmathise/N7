import 'SimplePDL.ecore'

package simplepdl

context Process
inv warningSeverity: false
inv withMessage('Explicit message in process ' + self.name + ' (withMessage)'): false
-- inv errorSeverity: null

context Process
inv hasName('The name of the process is empty'): 
	self.name <> ''

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()	
	
context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()
inv nonReflessive('predecessor and sucessor must be different'):
	self.predecessor <> self.successor
	
context WorkDefinition
def: wd(): WorkDefinition =
	WorkDefinition.allInstances()
		-> select(wd | wd->includes(self))
		-> asSequence()->first()
inv hasName('The name of the WorkDefiniton is empty'): 
	self.name <> ''
inv uniqNames('Not uniq name: ' + self.name): self.Process.processElements
	-> select(processelement | processelement.oclIsKindOf(WorkDefinition))
	-> collect(processelement | processelement.oclAsType(WorkDefinition))
	-> forAll(w | self = w or self.name <> w.name)

context linksResources
inv enoughResource('Not enough resources :' + self.usedResources.name):
	self.quantityNeeded <= self.usedResources.nbOccurence
inv goodWD('Not the good Workdefinition: '+ self.workdefinition.name):
	self.workdefinition.name.matches(self.workdefinition.wd().name)

context Resources
inv hasName('The name of the Resource is empty'): 
	self.name <> ''
inv resourceNonNegative('Negative resources'):
	self.nbOccurence >= 0

endpackage