package monopoly.swing;

import monopoly.divers.*;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;

public class PlateauSwing extends JFrame implements MouseListener {

    private static final long serialVersionUID = 1L;

    private ArrayList<JoueurMonopoly> joueurs;
    private Integer nbjoueurs;

    public static final Integer tailleCase = 40;

    // Infos sur une case
    private JLabel nom = initNom();
    private JLabel type = initType();
    private JLabel proprietaire = initProp();
    // JLabel prix = new JLabel();

    // Les cases du plateau
    private CaseSwing[] cases = initCases();

    // Les onglets joueurs
    private JTabbedPane onglets;
    
    // Panel des joueurs (sous les onglets)
    private InfosJoueur[] panneaux;

    public PlateauSwing(ArrayList<JoueurMonopoly> joueurs) {
        super();
        this.joueurs = joueurs;
        this.nbjoueurs = joueurs.size();
        this.panneaux = new InfosJoueur[this.nbjoueurs];
        initPanneaux();
        this.onglets = initOnglets();
        this.setVisible(false);
        this.setTitle("Monopoly : Plateau");
        this.setSize(1000, 500);
        this.setLocationRelativeTo(null);
        this.setContentPane(panelPlateau());
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    public void actualiserSwing() {
        for (int i = 0; i < this.nbjoueurs; i++) {
            this.panneaux[i].actualiserInfos();
        }
    }

    private JLabel initNom() {
        JLabel nom = new JLabel();
        nom.setBounds(PlateauSwing.tailleCase + 10, PlateauSwing.tailleCase + 10, 9 * PlateauSwing.tailleCase - 20, 25);
        return nom;
    }

    private JLabel initType() {
        JLabel type = new JLabel();
        type.setBounds(PlateauSwing.tailleCase + 10, PlateauSwing.tailleCase + 35, 9 * PlateauSwing.tailleCase - 20, 25);
        return type;
    }

    private JLabel initProp() {
        JLabel prop = new JLabel();
        prop.setBounds(PlateauSwing.tailleCase + 10, PlateauSwing.tailleCase + 60, 9 * PlateauSwing.tailleCase - 20, 25);
        return prop;
    }

    private void initInfosCase(Case c) {
        TypeCase typecase = c.getType();
        nom.setVisible(false);
        type.setVisible(false);
        proprietaire.setVisible(false);
        nom.setText("Nom de la case : " + StringPerso.creer(c.getNom()));
        type.setText("Type de la case : " + typecase.toString());

        try {
            proprietaire.setText(c.getNomProp());
        }
        catch (java.lang.NullPointerException e) {
            proprietaire.setText(StringPerso.creer("Cette propriété est disponible"));
        }
    }

    private void initPanneaux() {
        for (int i = 0; i < this.nbjoueurs; i++) {
            this.panneaux[i] = new InfosJoueur(this.joueurs.get(i));
        }
    }

    private JTabbedPane initOnglets() {
        JTabbedPane res = new JTabbedPane();
        res.setBounds(tailleCase*11, 0, 1000 - tailleCase*11, 500);
        res.setVisible(true);
        for (int i = 0; i < this.nbjoueurs; i++) {
            res.addTab(this.joueurs.get(i).getNom(), this.panneaux[i]);
        }
        return res;
    }

    private void affichageInfosCase(Boolean afficher) {
        nom.setVisible(afficher);
        type.setVisible(afficher);
        proprietaire.setVisible(afficher);
    } 

    private JPanel panelPlateau() {

        // Panel de la fenetre
        JPanel panel = new JPanel();

        // Layout du panel (null pour placer les boutons où on veut
        panel.setLayout(null);

        for (int i = 0; i < Plateau.nbCases; i++) {

            // On ajoute le listener sur la case pour gérer les effets
            cases[i].addMouseListener(this);

            // Position et taille de la case
            cases[i].setBounds(idToX(i), idToY(i), PlateauSwing.tailleCase, PlateauSwing.tailleCase);

            // Images sur la case
            // TODO changer les simples textes en belles images.

            // Ajout de la case au panel
            panel.add(cases[i]);

        }

        // On ajoute les infos des cartes
        panel.add(nom);
        panel.add(type);
        panel.add(proprietaire);
        panel.add(onglets);

        // Le panel est complet
        return panel;
    }

    private CaseSwing[] initCases() {
        CaseSwing[] tab = new CaseSwing[Plateau.nbCases];
        for (int i = 0; i < Plateau.nbCases; i++) {
            tab[i] = new CaseSwing(Plateau.cases[i]);
        }
        return tab;
    }

    private Integer idToX(Integer id) {
        assert (id >= 0);
        assert (id <= 39);
        if (id <= 9) {
            return (10 - id) * PlateauSwing.tailleCase;
        } else if (id >= 10 && id <= 20) {
            return 0;
        } else if (id >= 21 && id <= 29) {
            return (id % 10) * PlateauSwing.tailleCase;
        } else {
            return 10 * PlateauSwing.tailleCase;
        }
    }

    private Integer idToY(Integer id) {
        assert (id >= 0);
        assert (id <= 39);
        if (id <= 10) {
            return 10 * PlateauSwing.tailleCase;
        } else if (id >= 11 && id <= 19) {
            return (20 - id) * PlateauSwing.tailleCase;
        } else if (id >= 20 && id <= 29) {
            return 0;
        } else {
            return (id % 10) * PlateauSwing.tailleCase;
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {

    }

    @Override
    public void mouseEntered(MouseEvent e) {
        CaseSwing source = (CaseSwing) e.getSource();
        // System.out.println("Entré dans " + source.getId());
        initInfosCase(source.getCase());
        affichageInfosCase(true);
    }

    @Override
    public void mouseExited(MouseEvent e) {
        CaseSwing source = (CaseSwing) e.getSource();
        // System.out.println("Sortie de " + source.getId());
        initInfosCase(source.getCase());
        affichageInfosCase(false);
    }

    @Override
    public void dispose() {
        Partie.menu.setVisible(true);
        super.dispose();
    }
}